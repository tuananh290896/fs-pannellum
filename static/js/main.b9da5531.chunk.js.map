{"version":3,"sources":["images/logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","data","item","setImage","renderHotspot","hotSpotDiv","args","classList","add","span","document","createElement","toolTip","html","t","innerHTML","content","cloneNode","parseHTML","title","appendChild","className","width","height","image","pitch","yaw","hfov","autoLoad","showZoomCtrl","onLoad","console","log","hotSpots","map","hotspot","index","Hotspot","type","key","tooltip","tooltipArg","handleClick","evt","handleClickArg","src","Logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,kC,wkBC+D5BC,MAjDf,WAAgB,IAAD,EACYC,mBAASC,GADrB,mBACNC,EADM,KACAC,EADA,KAGPC,EAAgB,SAACC,EAAYC,GACjCD,EAAWE,UAAUC,IAAI,kBACzB,IAAIC,EAAOC,SAASC,cAAc,QAC9BC,EAZR,SAAmBC,GACjB,IAAIC,EAAIJ,SAASC,cAAc,YAE/B,OADAG,EAAEC,UAAYF,EACPC,EAAEE,QAAQC,WAAU,GASXC,CAAU,qCAAD,OAAsCZ,EAAKa,MAA3C,eACvBd,EAAWe,YAAYX,GACvBJ,EAAWe,YAAYR,IAGzB,OACE,yBAAKS,UAAU,OACb,kBAAC,IAAD,CACEC,MAAM,OACNC,OAAO,QACPC,MAAOtB,EAAKsB,MACZC,MAAOvB,EAAKuB,MACZC,IAAKxB,EAAKwB,IACVC,KAAM,IACNC,UAAQ,EACRC,cAAc,EACdC,OAAQ,WACNC,QAAQC,IAAI,qBAIZ9B,EAAK+B,UAAY/B,EAAK+B,SAASC,KAAI,SAACC,EAASC,GAC3C,OAAO,kBAAC,IAAUC,QAAX,CACPC,KAAK,SACLC,IAAKH,EACLX,MAAOU,EAAQV,MACfC,IAAKS,EAAQT,IACbc,QAASpC,EACTqC,WAAY,CAAC,MAASN,EAAQhB,OAC9BuB,YAAa,SAACC,EAAMrC,GAAP,OAAgBH,EAASG,EAAKJ,OAC3C0C,eAAgB,CAAE,KAAQT,SAMhC,yBAAKd,UAAU,UACX,yBAAKwB,IAAKC,IAAOC,IAAI,gBAAgB1B,UAAU,0BC7CrC2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.b9da5531.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.9164dab8.png\";","import React, {useState} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Pannellum } from \"pannellum-react\";\nimport Logo from \"./images/logo.png\";\nimport data from './data/data.json'\n\nimport \"./index.css\";\n\nfunction parseHTML(html) {\n  var t = document.createElement('template');\n  t.innerHTML = html;\n  return t.content.cloneNode(true);\n}\n\nfunction App() {\n  const [item, setImage] = useState(data)\n\n  const renderHotspot = (hotSpotDiv, args) =>{\n    hotSpotDiv.classList.add('custom-tooltip');\n    var span = document.createElement('span');\n    var toolTip = parseHTML(`<div class=\"pannellumn-tootip\"><p>${args.title}</p></div>`)\n    hotSpotDiv.appendChild(span);\n    hotSpotDiv.appendChild(toolTip);\n  }\n\n  return (\n    <div className=\"App\">\n      <Pannellum\n        width=\"100%\"\n        height=\"100vh\"\n        image={item.image}\n        pitch={item.pitch}\n        yaw={item.yaw}\n        hfov={200}\n        autoLoad\n        showZoomCtrl={false}\n        onLoad={() => {\n          console.log(\"panorama loaded\");\n        }}\n      >\n        {\n          item.hotSpots && item.hotSpots.map((hotspot, index) =>{\n            return <Pannellum.Hotspot\n            type=\"custom\"\n            key={index}\n            pitch={hotspot.pitch}\n            yaw={hotspot.yaw}\n            tooltip={renderHotspot}\n            tooltipArg={{'title': hotspot.title }}\n            handleClick={(evt , args) => setImage(args.item)}\n            handleClickArg={{ \"item\": hotspot }}\n          />\n          })\n        }\n      </Pannellum>\n\n      <div className=\"header\">\n          <img src={Logo}  alt=\"logo Fservice\" className=\"header-brand__logo\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}